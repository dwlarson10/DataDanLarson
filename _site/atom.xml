<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Dan Larson</title>
    <link type="application/atom+xml" rel="self" href="http://localhost:3000/atom.xml"/>
  
  <link href="http://localhost:3000/"/>
  <id>http://localhost:3000/</id>
  <updated>2018-10-27T14:28:51Z</updated>
  <author>
    <name>Dan Larson</name>
    <email>dwlarson10@gmail.com</email>
  </author>
  <rights type="text">Copyright © 2018 Dan Larson. All rights reserved.</rights>
  
  <entry>
  <title type="text">Analysis of Dissect Artists post 2: Linear regression</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Dissect-Analysis-2.html" />
  <id>http://localhost:3000/Dissect Analysis 2</id>
  <published>2018-07-06T00:00:00Z</published>
  <updated>2018-07-06T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h4 id="the-project">The project</h4>

<p>In my <a href="http://danlarson.io/Dissect-analysis-gettng-data.html">post last week</a> I explored the data for the three artists that have been analyzed by the Dissect Podcast. The initial analysis uses data available through the Spotify API. Before moving on to analyzing the actual lyrics of these artists, I am going to determine which of the features available through Spotify have the largest impact on track popularity.</p>

<p>Before building the model lets look at some plots. Last week, I read this article on <a href="https://aghaynes.wordpress.com/2018/06/28/beeswarms-instead-of-histograms/">bee swarm plots</a> and thought I would give it a try. There are several packages available to build bee swarm plots but the package ggbeeswarm interacts with ggplot which is a huge plus for me. The bee swarm plot is another method of displaying distribution. Each dot represents a track and in instances where the dots are densely distributed a randomness spreads them out to create a shape similar to a violin plot. What I like about this plot is that each track is represented and you get to see a shape represented in the data. The first bee swarm shows the distribution of track popularity by artist. The shape of the points indicates if the track was on the album analyzed on the Dissect Podcast.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggbeeswarm</span><span class="p">)</span><span class="w">
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">dissect</span><span class="p">,</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">artist</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">=</span><span class="n">track_popularity</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="n">artist</span><span class="p">,</span><span class="n">shape</span><span class="o">=</span><span class="n">factor</span><span class="p">(</span><span class="n">dissected</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_quasirandom</span><span class="p">(</span><span class="n">groupOnX</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">13</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">13</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">22</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">legend.direction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"horizontal"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Distribution of track popularity by artist"</span><span class="p">,</span><span class="w">
    </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Track popularity"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Artist"</span><span class="p">,</span><span class="w">
    </span><span class="n">shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Dissected"</span><span class="p">,</span><span class="w"> </span><span class="n">caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Track popularity based on Spotify popularity metric"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/BeeswarmPopularity-1.png" width="100%" alt="Beeswarm Track Popularity" /></p>

<p>Okay… Okay… lets do one more bee swarm for fun. Here are the track features presented as a bee swarm plot. While I really like joy, plots as presented in the post last week, I think this plot really tells us a more interesting story about the different features.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">ggridges</span><span class="p">)</span><span class="w">

</span><span class="n">dissect</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">artist</span><span class="p">,</span><span class="n">album_name</span><span class="p">,</span><span class="n">danceability</span><span class="p">,</span><span class="n">energy</span><span class="p">,</span><span class="n">speechiness</span><span class="p">,</span><span class="n">acousticness</span><span class="p">,</span><span class="n">instrumentalness</span><span class="p">,</span><span class="n">liveness</span><span class="p">,</span><span class="n">valence</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">gather</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="s1">'key'</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="s1">'value'</span><span class="p">,</span><span class="o">-</span><span class="n">album_name</span><span class="p">,</span><span class="o">-</span><span class="n">artist</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">value</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">reorder</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">),</span><span class="n">color</span><span class="o">=</span><span class="n">key</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_quasirandom</span><span class="p">(</span><span class="n">groupOnX</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'Distribution of track features'</span><span class="p">)</span><span class="w">  </span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"blank"</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"blank"</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">13</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">24</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"none"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Value"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/BeeswarmTrackFeatures-1.png" width="100%" alt="Beeswarm track features" /></p>

<p>The next step is to fit a linear model to the data. At this point, I am only using the subset of the variables from spotify to determine track popularity. In the future we are going to collect additional data to see if we can improve our understanding of what makes a track popular.</p>

<p>Looking at the output, you can see that the model is significant and that it has an r-squared adjusted of .22. We can interpret this as the model can explain roughly 22% of the variance in track popularity of these artists. Looking at the coefficients we can determine that danceability and the metric we created of Dissected are the most significant. The estimates give as an estimation of the impact of each variable. For instance. as the danceability of a track goes up so will it’s popularity. in contrast, more instrumental tracks will be less popular.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">options</span><span class="p">(</span><span class="n">scipen</span><span class="o">=</span><span class="m">999</span><span class="p">)</span><span class="w">
</span><span class="n">fit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">track_popularity</span><span class="w"> </span><span class="o">~</span><span class="w">
            </span><span class="n">danceability</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">energy</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">loudness</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">speechiness</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">acousticness</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">instrumentalness</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">liveness</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">valence</span><span class="w"> </span><span class="o">+</span><span class="w">
            </span><span class="n">tempo</span><span class="o">+</span><span class="w">
            </span><span class="n">duration_ms</span><span class="o">+</span><span class="n">dissected</span><span class="p">,</span><span class="w">
          </span><span class="n">data</span><span class="o">=</span><span class="n">dissect</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">fit</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##
## Call:
## lm(formula = track_popularity ~ danceability + energy + loudness +
##     speechiness + acousticness + instrumentalness + liveness +
##     valence + tempo + duration_ms + dissected, data = dissect)
##
## Residuals:
##     Min      1Q  Median      3Q     Max
## -58.212  -5.280   3.035  10.947  38.734
##
## Coefficients:
##                      Estimate   Std. Error t value   Pr(&gt;|t|)    
## (Intercept)       36.74883195  13.39781346   2.743   0.006534 **
## danceability      32.69493122   9.35540820   3.495   0.000562 ***
## energy            -3.16565101   9.71602021  -0.326   0.744837    
## loudness           1.40318996   0.57331808   2.447   0.015080 *  
## speechiness        9.77079925   6.50827013   1.501   0.134553    
## acousticness       7.59052023   5.27337993   1.439   0.151297    
## instrumentalness -17.68863633  10.87018871  -1.627   0.104951    
## liveness         -17.81113245   5.93487767  -3.001   0.002965 **
## valence          -20.10177966   6.16897895  -3.259   0.001277 **
## tempo              0.11653480   0.03730598   3.124   0.001998 **
## duration_ms        0.00001199   0.00001258   0.953   0.341610    
## dissected         14.75021865   3.16983344   4.653 0.00000532 ***
## ---
## Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1
##
## Residual standard error: 18.13 on 248 degrees of freedom
## Multiple R-squared:  0.255,  Adjusted R-squared:  0.222
## F-statistic: 7.718 on 11 and 248 DF,  p-value: 0.00000000001845
</code></pre></div></div>

<p>The plot below shows the estimates and confidence intervals. You can see that danceability has the largest positive effect and valence and liveness have the largest negative effect on track popularity.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">require</span><span class="p">(</span><span class="n">broom</span><span class="p">)</span><span class="w">
</span><span class="n">td</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tidy</span><span class="p">(</span><span class="n">fit</span><span class="p">,</span><span class="w"> </span><span class="n">conf.int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">td</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">estimate</span><span class="p">,</span><span class="w"> </span><span class="n">reorder</span><span class="p">(</span><span class="n">term</span><span class="p">,</span><span class="n">estimate</span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">term</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">geom_point</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">geom_errorbarh</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">xmin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conf.low</span><span class="p">,</span><span class="w"> </span><span class="n">xmax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conf.high</span><span class="p">))</span><span class="w">  </span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray94"</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"blank"</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">13</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">24</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"none"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Term estimates for track popularity model"</span><span class="p">,</span><span class="w">
    </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p><img src="http://danlarson.io/static/img/TermEstimates-1.png" width="100%" alt="TermEstimates" /></p>

<h4 id="evaluating-model">Evaluating Model</h4>

<p>The plots below can help us interpret how well our model is fitted. The first plot, residuals vs fitted, helps identify whether there is a non-linear relationship in the data. in other words, you hope that there is no distinct pattern in the residuals. In these data there may be a non-linear relationship that we need to explore.</p>

<p>The next plot, Normal Q-Q, is again used to determine how normally distributed the residuals are. With this plot we are hoping that the residuals fall on as close to a straight line as possible. In this instance there is something concerning in the data that cause the residuals to shift about one-third up the plot. .</p>

<p>Scale-Location allows us to make sure the residuals are spread along the range of predictors. The fact that there is a slightly negatively sloping line again suggests that there is something in our model that we need to explore.</p>

<p>Finally, the Residuals vs Leverage plot helps to identify any cases that may be outliers that impact the model. We are looking for cases in the upper or lower right hand corners of the plot. You can see that there are at least three cases that we should explore more closely.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggfortify</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning: package 'ggfortify' was built under R version 3.4.4
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">autoplot</span><span class="p">(</span><span class="n">fit</span><span class="p">,</span><span class="n">label.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/Evaluation-1.png" width="100%" alt="Evaluation" /></p>

<h4 id="next-steps">Next steps</h4>

<p>The next steps with this analysis will be to understand the outliers and try to build a model that fits our data better. To get there we will add some additional variables that can help understand what makes a track popular for these three artists. I will be extracting the lyrics for each artists songs using the Rap Genius API and doing some text analysis to improve our understanding of these artists.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Summer of data science week 2</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Week-2-of-Summer-of-data-science.html" />
  <id>http://localhost:3000/Week 2 of Summer of data science</id>
  <published>2018-06-25T00:00:00Z</published>
  <updated>2018-06-25T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h2 id="so-what-i-started-late">So what I started late</h2>

<p>I know I am off to a slightly later start than most of the other people on twitter but who cares. This week I was somewhat successful, I was able to start the Dissect analysis, read the first chapter of Elements of Statistical Learning (who cares that it was only the intro chapter), and start collecting resources for my mural project.</p>

<h4 id="random-articles-that-i-thought-were-interesting">Random articles that I thought were interesting</h4>

<ul>
  <li><a href="https://www.eokodie.com/blog/drinking-from-the-firehose-using-r-to-keep-up-with-current-ml-research---part-1/">DRINKING FROM THE FIREHOSE: USING R TO KEEP UP WITH CURRENT ML RESEARCH - PART 1</a></li>
</ul>

<h2 id="reminder-here-are-my-projects-for-the-summer">Reminder: Here are my projects for the summer</h2>

<ol>
  <li>Philadelphia Mural image classifier</li>
  <li>Dissect Podcast artist analysis</li>
  <li>Learn more about virtual environments and how to use them</li>
  <li>Read <a href="https://www.amazon.com/gp/offer-listing/0387848576/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0387848576&amp;linkCode=am2&amp;tag=sociall1-20&amp;linkId=9c6be555ff204ae60dcbb120dbfd9502">Elements of Statistical Learning</a></li>
</ol>

<h4 id="project-1-philadelphia-mural-image-classifier">Project 1: Philadelphia mural image classifier</h4>

<p>Unfortunately, I didn’t make much progress on this project. However, I read up on a couple packages to scrape images and discovered that I will need to learn more about <a href="https://tensorflow.rstudio.com/keras/">Keras</a>, a TensorFlow package for Rstudio. I have adjusted my objectives below to match the current state of the project.</p>

<ul>
  <li>week 2: explore python packages for Instagram API challenges / Work through Keras Demo</li>
  <li>week 2: set up python package and test functionality</li>
  <li>week 3: set up package to download images</li>
  <li>week 4: identify resources for image classifier</li>
</ul>

<h4 id="project-2-dissect-podcast-artist-analysis">Project 2: Dissect Podcast artist analysis</h4>

<p>I made a good bit of progress on this goal. First, I scraped all the data I needed and wrote this <a href="http://danlarson.io/Dissect-analysis-gettng-data.html">post</a>. Additionally, I researched the best ways get all the lyrics for each track by these artists. At this point the biggest challenge will be to get that data and process it into a data frame that I can work with.</p>

<p>A random plot I didn’t share in the descriptive analysis post. The plot below shows the relationship between danceability and track popularity. It is interesting that for both Kendrick Lamar and Kanye West there is a positive correlation but for Frank Ocean it is negative.</p>

<p><img src="http://danlarson.io/static/img/danceability_and_popularity.png" width="100%" alt="danceability and popularity" /></p>

<ul>
  <li>week 1: using the Spotify API extract data on all tracks by Kendrick Lamar, Kanye West, and Frank Ocean.</li>
  <li>week 2: complete a exploratory analysis of the three artists.</li>
  <li>week 3: create data set of artist lyrics</li>
  <li>week 4: statistical analysis of the three artists and what makes them different from Spotify data set.</li>
</ul>

<h4 id="project-3-learn-more-about-virtual-environments-and-how-to-use-them">Project 3: Learn more about virtual environments and how to use them</h4>

<p>While I didn’t do a very good job on this project, I did come across some resources that I am reading/processing now. This project is much more about utilizing tools and starting good habits so I hope to focus a little more on it this week.</p>

<ul>
  <li><a href="https://github.com/reconhub/reportfactory">Report Factories in R</a></li>
</ul>

<h4 id="project-4-read-elements-of-statistical-learning">Project 4: Read Elements of Statistical Learning</h4>

<p>As planned this week I read the first chapter of the book <a href="https://www.amazon.com/gp/offer-listing/0387848576/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0387848576&amp;linkCode=am2&amp;tag=sociall1-20&amp;linkId=9c6be555ff204ae60dcbb120dbfd9502">Elements of Statistical Learning</a>. The chapter focused on what to expect from the book. The next chapter provides an introduction to supervised learning which is the primary focus of the book. A while back I purchased Chris Albon’s <a href="https://machinelearningflashcards.com/">Machine Learning Flashcards</a> and I am finally going to utilize them. Here is the one on supervised vs unsupervised learning.</p>

<p><img src="http://danlarson.io/static/img/machine_learning_flashcards_v1.9_png_print_Supervised_Vs_Unsupervised_print.png" width="100%" alt="machine learning flashcards v1.9 png_print Supervised_Vs_Unsupervised_print" /></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Analysis of Dissect Artists post 1: Getting Data</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Dissect-analysis-gettng-data.html" />
  <id>http://localhost:3000/Dissect analysis gettng data</id>
  <published>2018-06-24T00:00:00Z</published>
  <updated>2018-06-24T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>#Analysis of Dissect Artists post 1: Getting Data</p>

<p>For the past year I have been completely obsessed with the <a href="https://dissectpodcast.com/">Podcast Dissect</a>. My obsession started with Cole’s deep dive into Kanye West’s ‘Beautiful Dark Twisted Fantasy’ and then into Kendrick Lamar’s ‘To Pimp a Butterfly.’ Cole digs into the artist and the music and gives you an appreciation for the work that I personally didn’t have before. After listening to the Kanye season, I played BDTF on repeat for nearly six months. At the time of me writing this, Dissect is digging into Frank Ocean’s album ‘Blond.’ I thought I would dig into some of the tools available from Spotify and see if there are any statistical trends we can identify from the artists analyzed by Cole Cuchna.</p>

<h3 id="data">Data</h3>

<p>These data were collected using the Spotify API. Spotify enables users to collect artist data down to the track level. For each track they have developed 15 characteristics. They are: danceability, energy, key, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, tempo, duration_ms, time_signature, key_mode, track_popularity. The data also includes album popularity, release date, and track name.</p>

<h3 id="spotifyr-package">spotifyr package</h3>

<p>With many popular APIs there is often someone who has built a package or wrapper to use with R. The Spotify API is no different. There is a great R wrapper for the Spotify API called <a href="https://github.com/charlie86/spotifyr">spotifyr</a> that has been developed by <a href="https://github.com/charlie86">charles86</a> on github. With only a few lines of code I was able to get all the tracks from Frank Ocean, Kanye West, and Kendrick Lamar.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">spotifyr</span><span class="p">)</span><span class="w">

</span><span class="c1"># Sets the API Keys and authenticates app</span><span class="w">

</span><span class="n">Sys.setenv</span><span class="p">(</span><span class="n">SPOTIFY_CLIENT_ID</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'my_client_ID'</span><span class="p">)</span><span class="w">
</span><span class="n">Sys.setenv</span><span class="p">(</span><span class="n">SPOTIFY_CLIENT_SECRET</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'my_client_secret'</span><span class="p">)</span><span class="w">
</span><span class="n">access_token</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_spotify_access_token</span><span class="p">()</span><span class="w">

</span><span class="c1">#Extracts data for each artists, adds a variable for artists and binds them to a single data-frame.</span><span class="w">

</span><span class="n">FOdf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_artist_audio_features</span><span class="p">(</span><span class="s1">'Frank Ocean'</span><span class="p">)</span><span class="w">
</span><span class="n">FOdf</span><span class="o">$</span><span class="n">artist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'Frank Ocean'</span><span class="w">
</span><span class="n">KWdf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_artist_audio_features</span><span class="p">(</span><span class="s1">'Kanye West'</span><span class="p">)</span><span class="w">
</span><span class="n">KWdf</span><span class="o">$</span><span class="n">artist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'Kanye West'</span><span class="w">
</span><span class="n">KLdf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_artist_audio_features</span><span class="p">(</span><span class="s1">'Kendrick Lamar'</span><span class="p">)</span><span class="w">
</span><span class="n">KLdf</span><span class="o">$</span><span class="n">artist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'Kendrick Lamar'</span><span class="w">
</span><span class="n">dissect</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">FOdf</span><span class="p">,</span><span class="n">KLdf</span><span class="p">,</span><span class="n">KWdf</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="starting-an-exploratory-analysis">Starting an exploratory analysis</h3>

<p>Now that we have the data we can start to explore it. The first thing that I like to do is just look at a summary of all the fields. While these summaries don’t tell us much, they do help to give me a sense of what each data field might look like.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dissect</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">artist</span><span class="p">,</span><span class="n">track_popularity</span><span class="p">,</span><span class="n">danceability</span><span class="p">,</span><span class="n">energy</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">loudness</span><span class="p">,</span><span class="n">mode</span><span class="p">,</span><span class="n">speechiness</span><span class="p">,</span><span class="n">acousticness</span><span class="p">,</span><span class="n">instrumentalness</span><span class="p">,</span><span class="n">liveness</span><span class="p">,</span><span class="n">valence</span><span class="p">,</span><span class="n">tempo</span><span class="p">,</span><span class="n">duration_ms</span><span class="p">,</span><span class="n">time_signature</span><span class="p">,</span><span class="n">key_mode</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summary</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##             artist    track_popularity  danceability        energy      
##  Frank Ocean   : 34   Min.   : 0.00    Min.   :0.2010   Min.   :0.0715  
##  Kanye West    :129   1st Qu.:49.00    1st Qu.:0.5032   1st Qu.:0.5000  
##  Kendrick Lamar: 97   Median :57.00    Median :0.5965   Median :0.6430  
##                       Mean   :52.16    Mean   :0.5918   Mean   :0.6105  
##                       3rd Qu.:65.00    3rd Qu.:0.6815   3rd Qu.:0.7610  
##                       Max.   :89.00    Max.   :0.9590   Max.   :0.9220  
##                                                                         
##       key        loudness          mode      speechiness    
##  C#     :53   Min.   :-21.487   major:141   Min.   :0.0285  
##  B      :30   1st Qu.: -8.959   minor:119   1st Qu.:0.0940  
##  G      :27   Median : -6.947               Median :0.2325  
##  F      :24   Mean   : -7.689               Mean   :0.2609  
##  F#     :22   3rd Qu.: -5.599               3rd Qu.:0.3578  
##  A#     :21   Max.   : -1.614               Max.   :0.9560  
##  (Other):83                                                 
##   acousticness      instrumentalness       liveness         valence      
##  Min.   :0.000259   Min.   :0.0000000   Min.   :0.0541   Min.   :0.0300  
##  1st Qu.:0.054125   1st Qu.:0.0000000   1st Qu.:0.1237   1st Qu.:0.2990  
##  Median :0.194500   Median :0.0000000   Median :0.1990   Median :0.4400  
##  Mean   :0.289753   Mean   :0.0216612   Mean   :0.2767   Mean   :0.4476  
##  3rd Qu.:0.442000   3rd Qu.:0.0000218   3rd Qu.:0.3762   3rd Qu.:0.5923  
##  Max.   :0.985000   Max.   :0.9740000   Max.   :0.9720   Max.   :0.9640  
##                                                                          
##      tempo         duration_ms     time_signature      key_mode  
##  Min.   : 48.34   Min.   : 19133   Min.   :1.000   C# major: 38  
##  1st Qu.: 85.81   1st Qu.:185610   1st Qu.:4.000   B minor : 24  
##  Median :102.10   Median :235504   Median :4.000   G major : 22  
##  Mean   :110.75   Mean   :235908   Mean   :3.981   A# minor: 15  
##  3rd Qu.:128.60   3rd Qu.:280088   3rd Qu.:4.000   C# minor: 15  
##  Max.   :193.02   Max.   :727107   Max.   :5.000   F minor : 15  
##                                                    (Other) :131
</code></pre></div></div>

<h3 id="distribution-of-popularity-of-tracks-by-artists">Distribution of popularity of tracks by artists</h3>

<p>The dependent variable that I am interested in for this analysis is the popularity of each track. What I hope to learn is for these artists which of the independent variables have the biggest impact on the success of the track. The box plots below show the distribution of popularity for each track by the three artists. The popularity of a track is measured between 0 and 100 and is based on the number of plays and the recency of those plays. Learn more about this metric and the other metrics collected from the API <a href="https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/">here</a></p>

<p>I think the difference in track popularity by these three artists is very interesting. Frank Ocean’s two albums are distinctively different, all of Kendrick Lamar’s tracks appears to be overall evenly popular, and Kanye Wests tracks have the widest spread.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dissect</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="c1">#filter(artist == 'Frank Ocean')%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">artist</span><span class="w"> </span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">track_popularity</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_boxplot</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_jitter</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">as.factor</span><span class="p">(</span><span class="n">dissected</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">24</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">,</span><span class="w"> </span><span class="n">legend.direction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"horizontal"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Distribution of track popularity by artist"</span><span class="p">,</span><span class="w">
    </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Track Popularity"</span><span class="p">,</span><span class="w"> </span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray4"</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Artist"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/track_plot-1.png" width="100%" alt="Track plot" /></p>

<p>In an attempt to better understand the popularity measure, I will use many of the other features available from the Spotify API. The ridgeplots below shows the differences in each variable by artist. You can see that for many of the variables there are little differences in the distribution by artists.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">ggridges</span><span class="p">)</span><span class="w">

</span><span class="n">dissect</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">artist</span><span class="p">,</span><span class="n">album_name</span><span class="p">,</span><span class="n">danceability</span><span class="p">,</span><span class="n">energy</span><span class="p">,</span><span class="n">speechiness</span><span class="p">,</span><span class="n">acousticness</span><span class="p">,</span><span class="n">instrumentalness</span><span class="p">,</span><span class="n">liveness</span><span class="p">,</span><span class="n">valence</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">gather</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="s1">'key'</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="s1">'value'</span><span class="p">,</span><span class="o">-</span><span class="n">album_name</span><span class="p">,</span><span class="o">-</span><span class="n">artist</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">value</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">reorder</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">),</span><span class="n">fill</span><span class="o">=</span><span class="n">artist</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_density_ridges</span><span class="p">(</span><span class="n">scale</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="n">alpha</span><span class="o">=</span><span class="m">.4</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_ridges</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'Distribution of track features by artist'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">,</span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">24</span><span class="p">),</span><span class="w">  </span><span class="n">legend.direction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"horizontal"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Feature"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Artist"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/ridgeplot1-1.png" width="100%" alt="Ridge Plot" /></p>

<p>For a slightly different view of the data above here is a box-plot of each variable with each data point jittered over the plot.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dissect</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">artist</span><span class="p">,</span><span class="n">album_name</span><span class="p">,</span><span class="n">danceability</span><span class="p">,</span><span class="n">energy</span><span class="p">,</span><span class="n">speechiness</span><span class="p">,</span><span class="n">acousticness</span><span class="p">,</span><span class="n">instrumentalness</span><span class="p">,</span><span class="n">liveness</span><span class="p">,</span><span class="n">valence</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">gather</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="s1">'key'</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="s1">'value'</span><span class="p">,</span><span class="o">-</span><span class="n">album_name</span><span class="p">,</span><span class="o">-</span><span class="n">artist</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">key</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">value</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_boxplot</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_jitter</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">artist</span><span class="p">))</span><span class="o">+</span><span class="w">
   </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">24</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">,</span><span class="w"> </span><span class="n">legend.direction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"horizontal"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Distribution of track features by artist"</span><span class="p">,</span><span class="w">
    </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Metric"</span><span class="p">,</span><span class="w"> </span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray4"</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"feature"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p><img src="http://danlarson.io/static/img/track_features_box-1.png" width="100%" alt="features box-plot" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dissect</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="c1">#filter(artist == 'Frank Ocean')%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">tempo</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">artist</span><span class="p">,</span><span class="n">fill</span><span class="o">=</span><span class="n">artist</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_density_ridges2</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="m">.5</span><span class="p">,</span><span class="n">scale</span><span class="o">=</span><span class="m">6</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_ridges</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'Tempo of tracks by artist'</span><span class="p">)</span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">legend.direction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"horizontal"</span><span class="p">,</span><span class="n">plot.caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">24</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Artist"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p><img src="http://danlarson.io/static/img/tempo_ridge-1.png" width="100%" alt="tempo plot" /></p>

<h3 id="correlation-matrix">Correlation Matrix</h3>

<p>The last thing that I am going to do with these data this week is to look for correlations between the variables. The correlation plot below shows which variables are correlated, how correlated, and whether or not the correlation is positive or negative. Look at what correlates to the track popularity metric, we will want to keep an eye on liveness, duration, instrumentalness, and tempo.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">corrplot</span><span class="p">)</span><span class="w">
</span><span class="n">require</span><span class="p">(</span><span class="n">ggcorrplot</span><span class="p">)</span><span class="w">

</span><span class="n">d</span><span class="m">2</span><span class="w"> </span><span class="o">&lt;-</span><span class="n">dissect</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">tempo</span><span class="p">,</span><span class="n">duration_ms</span><span class="p">,</span><span class="n">danceability</span><span class="p">,</span><span class="n">energy</span><span class="p">,</span><span class="n">speechiness</span><span class="p">,</span><span class="n">acousticness</span><span class="p">,</span><span class="n">instrumentalness</span><span class="p">,</span><span class="n">liveness</span><span class="p">,</span><span class="n">valence</span><span class="p">,</span><span class="n">track_popularity</span><span class="p">)</span><span class="w">

</span><span class="n">corr</span><span class="o">&lt;-</span><span class="n">cor</span><span class="p">(</span><span class="n">d</span><span class="m">2</span><span class="p">)</span><span class="w">

</span><span class="n">ggcorrplot</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span><span class="w"> </span><span class="n">hc.order</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
     </span><span class="n">outline.col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">
     </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lower"</span><span class="p">,</span><span class="n">method</span><span class="o">=</span><span class="s1">'circle'</span><span class="p">,</span><span class="w">
     </span><span class="n">colors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"#6D9EC1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="s2">"#E46726"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">),</span><span class="w">
    </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Correlation matrix of the spotify track features"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p><img src="http://danlarson.io/static/img/Correlation-1.png" width="100%" alt="Correlation Plot" /></p>

<h3 id="next-steps">Next steps</h3>

<p>Next week I will utilize a logistic regression technique to understand which of the metrics can help explain the popularity of each track.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Summer of data science goals</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Summer-of-Data-Science.html" />
  <id>http://localhost:3000/Summer of Data Science</id>
  <published>2018-06-16T00:00:00Z</published>
  <updated>2018-06-16T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h2 id="what-is-the-summer-of-data-science">What is the summer of data science?</h2>

<p>The summer of data science is the brain child of the <a href="https://twitter.com/BecomingDataSci?lang=en">Data Science Renee</a> on twitter. Read her first two posts <a href="https://www.becomingadatascientist.com/2018/05/28/summer-of-data-science-2018-sods18-launch-day/">here</a> and <a href="https://www.becomingadatascientist.com/2018/06/06/summer-of-data-science-goal-setting/">here</a>. For me, the summer of data science is an effort to focus on learning specific skills and to interact with the larger data science community. In this post, I will share my projects and learning plan for each one. As the summer progresses I hope to continue to post updates here and on twitter.</p>

<h2 id="my-summer-projects">My Summer Projects</h2>

<p>I have four projects this summer. Two are to create specific products while the other two are skill building/learning focused.</p>

<ol>
  <li>Philadelphia Mural image classifier</li>
  <li>Dissect Podcast artist analysis</li>
  <li>Learn more about virtual environments and how to use them</li>
  <li>Read <a href="https://www.amazon.com/gp/offer-listing/0387848576/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0387848576&amp;linkCode=am2&amp;tag=sociall1-20&amp;linkId=9c6be555ff204ae60dcbb120dbfd9502">Elements of Statistical Learning</a></li>
</ol>

<h2 id="strategy-to-complete-the-projects">Strategy to complete the projects</h2>

<p>My main focus for this summer is to develop a few habits. First, start a coding habit where I regular work through programing challenges. Second, do more analysis focusing on more and more complex statistical techniques. Third, build good coding habits. Finally, I hope to increase my overall understanding of statistical techniques and principles. Here is how I hope to spend the next 10 weeks.</p>

<h4 id="project-1-philadelphia-mural-image-classifier">Project 1: Philadelphia mural image classifier</h4>

<p>I have been talking about building a mural image classifier for some time. In the first couple weeks I plan to build a web scraping script that will download images from Instagram with the hashtag #PhillyMural. Once I have the script working. I will start learning how to build an image classifier to determine the identity of each mural. The end goal will be to create a database of geotagged murals throughout Philadelphia.</p>

<ul>
  <li>week 1: explore python packages for Instagram API challenges</li>
  <li>week 2: set up python package and test functionality</li>
  <li>week 3: set up package to download images</li>
  <li>week 4: identify resources for image classifier</li>
</ul>

<h4 id="project-2-dissect-podcast-artist-analysis">Project 2: Dissect Podcast artist analysis</h4>

<p>One of my favorite podcasts is Dissect. A long format analysis of particular albums. So far the host has done three seasons, Kendrick Lamar, Kanye West, and the current season Frank Ocean. I plan to do a series of analysis of these artists’ music and lyrics. While these analysis will be fun, I also hope to use this project to explore various statistical analysis techniques. On a weekly basis I will share both short form exploratory analysis and insights on new statistical methodology.</p>

<ul>
  <li>week 1: using the Spotify API extract data on all tracks by Kendrick Lamar, Kanye West, and Frank Ocean.</li>
  <li>week 2: complete a exploratory analysis of the three artists.</li>
  <li>week 3: create data set of artist lyrics</li>
  <li>week 4: statistical analysis of the three artists and what makes them different from Spotify data set.</li>
</ul>

<h4 id="project-3-learn-more-about-virtual-environments-and-how-to-use-them">Project 3: Learn more about virtual environments and how to use them</h4>

<p>This undertaking is to help me utilize best practices in programing/data science. In addition to understanding virtual environments for when I use python, I also plan to start using the project feature when working in R studio. Each week I will write about my own frustrations and epiphanies while trying to improve my basic techniques.</p>

<h4 id="project-4-read-elements-of-statistical-learning">Project 4: Read Elements of Statistical Learning</h4>

<p>I plan to read a chapter a week and work through the R examples on my own computer. The book is actually 18 chapters long so this goal might last a little into the fall. Each week I will share some of the knowledge I gain from this exercise.</p>

<p>I hope to approach mastery understanding of the following techniques</p>

<ul>
  <li>Linear Regression</li>
  <li>Logistic Regression</li>
  <li>Decision Trees</li>
  <li>Support Vector Machines (SVM)</li>
  <li>Clustering</li>
</ul>
 ]]></content>
</entry>


  <entry>
  <title type="text">Building a Strava Dashboard Post 1: Extracting Data</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/StravaExtract.html" />
  <id>http://localhost:3000/StravaExtract</id>
  <published>2017-10-21T00:00:00Z</published>
  <updated>2017-10-21T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="what-is-the-project">What is the project?</h1>

<p>The goal of this blog is for me to share various techniques as I learn them. The next series of posts is my attempt at learning to build a dashboard for my Strava data. I am training for a Half in December and what better way to stay motivated than to monitor my progress. In this post, I will extract the Strava data using their API and build a few visualizations to see if I have any patterns.</p>

<h2 id="extracting-data-from-strava">Extracting data from Strava.</h2>

<p>The first step is to set up the API to pull. Before you can write any code you need to set up your Strava app [<a href="https://www.strava.com/settings/api">https://www.strava.com/settings/api</a>]. Once you have set up your Strava app you can extract data.</p>

<p>The code below sets up the key, authorization and access. Then it sets up the authentication token. Next, we use the jsonlite package to do the actual data extraction.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">httr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">httpuv</span><span class="p">)</span><span class="w">
</span><span class="n">my_app</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">oauth_app</span><span class="p">(</span><span class="s2">"strava"</span><span class="p">,</span><span class="w">
                    </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"[your key]"</span><span class="p">,</span><span class="w">
                    </span><span class="n">secret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"[your secret key]"</span><span class="w">
</span><span class="p">)</span><span class="w">


</span><span class="n">my_endpoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">oauth_endpoint</span><span class="p">(</span><span class="w">
  </span><span class="n">request</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w">
  </span><span class="n">authorize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://www.strava.com/oauth/authorize"</span><span class="p">,</span><span class="w">
  </span><span class="n">access</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://www.strava.com/oauth/token"</span><span class="w">
</span><span class="p">)</span><span class="w">


</span><span class="n">sig</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">oauth2.0_token</span><span class="p">(</span><span class="n">my_endpoint</span><span class="p">,</span><span class="w"> </span><span class="n">my_app</span><span class="p">,</span><span class="w"> </span><span class="n">scope</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"view_private"</span><span class="p">,</span><span class="w">  
                      </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">use_oob</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">as_header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w">   
                      </span><span class="n">use_basic_auth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
                      </span><span class="n">cache</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">




</span><span class="n">library</span><span class="p">(</span><span class="n">jsonlite</span><span class="p">)</span><span class="w">
</span><span class="n">jsonData</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fromJSON</span><span class="p">(</span><span class="s2">"https://www.strava.com/api/v3/athlete/activities?access_token=cb576993aa710c4bf32ac7b9a006a0f110add218&amp;per_page=200"</span><span class="p">,</span><span class="n">flatten</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Once I have loaded the data into our R console, I can start working with it. There are already 49 variables but there are a few that still need some work. First, we turn the data set into a tibble. A tibble is similar to a dataframe but interacts with the Tidyverse. We can then use the Mutate function to create the variables we want. We first modify the date to be a more R friendly format. Next we turn the distance variable from meters to miles. We then create a year, month, weekday, and hour of day variables from the time. For now, these variables are all we need. However, if we decide that we want more we can away use the mutate variable to quickly add more.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: tidyverse

## Loading tidyverse: ggplot2
## Loading tidyverse: tibble
## Loading tidyverse: tidyr
## Loading tidyverse: readr
## Loading tidyverse: purrr
## Loading tidyverse: dplyr

## Warning: package 'dplyr' was built under R version 3.4.2

## Conflicts with tidy packages ----------------------------------------------

## filter(): dplyr, stats
## lag():    dplyr, stats
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">lubridate</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: lubridate

##
## Attaching package: 'lubridate'

## The following object is masked from 'package:base':
##
##     date
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">strava</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.tibble</span><span class="p">(</span><span class="n">jsonData</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">start_date_local</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ymd_hms</span><span class="p">(</span><span class="n">start_date_local</span><span class="p">),</span><span class="w">
         </span><span class="n">miles</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">distance</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">1609.344</span><span class="p">,</span><span class="w">
         </span><span class="n">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">year</span><span class="p">(</span><span class="n">start_date_local</span><span class="p">),</span><span class="w">
         </span><span class="n">wday</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wday</span><span class="p">(</span><span class="n">start_date_local</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
         </span><span class="n">month</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">month</span><span class="p">(</span><span class="n">start_date_local</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
         </span><span class="n">hour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hour</span><span class="p">(</span><span class="n">start_date_local</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<h2 id="quick-static-analysis">Quick static analysis</h2>

<p>To start, I looked at what my running distance by month has been since starting to run in 2015. Interestingly, I steadily ran more in 2015 than I did last year. However, this year I am on track to have run more.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">strava</span><span class="o">%&gt;%</span><span class="n">group_by</span><span class="p">(</span><span class="n">year</span><span class="p">,</span><span class="n">month</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">distance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">miles</span><span class="p">),</span><span class="n">heart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">average_heartrate</span><span class="p">),</span><span class="n">runs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">month</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">distance</span><span class="p">,</span><span class="n">group</span><span class="o">=</span><span class="n">year</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="n">factor</span><span class="p">(</span><span class="n">year</span><span class="p">)))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">stat</span><span class="o">=</span><span class="s1">'identity'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Total distance by month of year"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/TotalDistance-1.png" width="100%" alt="Total distance by month" /></p>

<p>This could be deceiving especially knowing when I typically do half marathons. So, I also looked at the average length for each month. By adding this view of the data I am able to learn that while I ran more miles in 2015 than in 2016 my average run for each month was longer in 2016. By create a dashboard for these data, I will be able to remind myself of the trend I am hoping to create and hopefully encourage myself to meet my goals.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">strava</span><span class="o">%&gt;%</span><span class="n">group_by</span><span class="p">(</span><span class="n">year</span><span class="p">,</span><span class="n">month</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">distance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">miles</span><span class="p">),</span><span class="n">heart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">average_heartrate</span><span class="p">),</span><span class="n">runs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">month</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">distance</span><span class="p">,</span><span class="n">group</span><span class="o">=</span><span class="n">year</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="n">factor</span><span class="p">(</span><span class="n">year</span><span class="p">)))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">stat</span><span class="o">=</span><span class="s1">'identity'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Average distance by month of year"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/AverageDistance-1.png" width="100%" alt="Average distance by month" /></p>

<p>In addition to running further I have also been training to go faster. While some of my efforts appear to have worked in the beginning of 2017, I have a ways to go to break out of the pace I appear to be currently occupying.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">strava</span><span class="o">%&gt;%</span><span class="n">group_by</span><span class="p">(</span><span class="n">year</span><span class="p">,</span><span class="n">month</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">distance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">miles</span><span class="p">),</span><span class="w"> </span><span class="n">speed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">average_speed</span><span class="o">*</span><span class="p">(</span><span class="m">25</span><span class="o">/</span><span class="m">11</span><span class="p">)),</span><span class="n">heart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">average_heartrate</span><span class="p">),</span><span class="n">runs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">month</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">speed</span><span class="p">,</span><span class="n">group</span><span class="o">=</span><span class="n">year</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="n">factor</span><span class="p">(</span><span class="n">year</span><span class="p">)))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">stat</span><span class="o">=</span><span class="s1">'identity'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Average Speed by month of year"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p><img src="http://danlarson.io/static/img/AverageSpeed-1.png" width="100%" alt="Average distance by month" /></p>

<p>In this post, I shared how to extract data using an R script and created a few charts that demonstrated why I am looking to build a dashboard to help improve my running routine. The next steps will be to learn write a shiny app to extract the Strava data when needed and build a dashboard. I hope to use the package FlexDashboards by RStudio to create the dashboard.</p>

<p>If you found this interesting please let me know by finding me on Twitter.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Using the Tidyverse to analyze the location of Confederate Memorials</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post3.html" />
  <id>http://localhost:3000/post3</id>
  <published>2017-10-04T00:00:00Z</published>
  <updated>2017-10-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h2 id="data">Data</h2>

<p>Following the incident in Charlottesville VA this summer, I wanted to know just how many confederate memorials there were. I reached out on Data for Democracy and found a report published by the SPLC. I then scraped the PDG and created a data set. I know it isn’t complete, but it is a great start. I have published the data set on Data.World here: <a href="https://data.world/datadanlarson/confederatemonument">https://data.world/datadanlarson/confederatemonument</a></p>

<p>This post is a combination of where these memorials are located and a quick tutorial on how to use the tidyverse to analyze it.</p>

<h2 id="dataworld">Data.World</h2>

<p>First, let me give a shout out to data.world. If you are training to be a data scientist this is a great place to get and share data sets. There is an added bonus of getting to work with SQL to extract data.</p>

<p>Below is the sequence needed to extract data from data.world.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Load the package</span><span class="w">
</span><span class="n">require</span><span class="p">(</span><span class="n">data.world</span><span class="p">)</span><span class="w">

</span><span class="c1"># Setup your token</span><span class="w">
</span><span class="n">data.world</span><span class="o">::</span><span class="n">set_config</span><span class="p">(</span><span class="n">data.world</span><span class="o">::</span><span class="n">save_config</span><span class="p">(</span><span class="n">auth_token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"YOUR_DATA.WORLD_TOKEN))

#identify the data source
link &lt;- "</span><span class="n">https</span><span class="o">://</span><span class="n">data.world</span><span class="o">/</span><span class="n">datadanlarson</span><span class="o">/</span><span class="n">confederatemonument</span><span class="s2">"

#extract the data
confMon &lt;- data.world::query(
  data.world::qry_sql("</span><span class="n">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">FROM</span><span class="w"> </span><span class="n">CivilWarMamorials</span><span class="err">"</span><span class="p">),</span><span class="w">
  </span><span class="n">dataset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">link</span><span class="w">
</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="tibbles">Tibbles</h2>

<p>Once you have the data in memory, you can transform it to a tibble. A tibble is similar to a Dataframe but a little different. I recommend reading Data Science with R by Garrett Grolemund and Hadley Wickham if you want to know more. For know, just know that they allow for easy data pipping that we will be using shortly.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span><span class="n">as.tibble</span><span class="p">(</span><span class="n">confMon</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## # A tibble: 1,528 x 6
##             state         city             nameofartifact
##             &lt;chr&gt;        &lt;chr&gt;                      &lt;chr&gt;
##  1        Alabama     Anniston Major John Pelham Monument
##  2        Alabama     Ashville       Confederate Monument
##  3        Alabama  Centreville       Confederate Monument
##  4        Alabama        Selma   Selma Navy Yard Memorial
##  5 South Carolina St. Matthews           “Lest We Forget”
##  6 South Carolina St. Matthews             Stonewall Lane
##  7 South Carolina  Summerville           Beauregard Court
##  8 South Carolina  Summerville            Stonewall Drive
##  9 South Carolina Timmonsville       Robert E. Lee Avenue
## 10 South Carolina Timmonsville            Stonewall Drive
## # ... with 1,518 more rows, and 3 more variables: type &lt;chr&gt;, year &lt;chr&gt;,
## #   civilwarstatus &lt;chr&gt;
</code></pre></div></div>

<h2 id="summarizing-with-tidyverse">Summarizing with tidyverse</h2>

<p>The main benefit of using a tibble over a dataframe is the ease with which you can summaries your data. Without a tibble you may need to take multiple steps to subset, transform, and summarize your data. With a tibble you can do all of this with a singe chain of commands. In the code below, I am able to filter the data set to only monuments, create a table of counts by state and sort the table in only five rows of text. Additionally, I did not need to create a new dataframe.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">as.tibble</span><span class="p">(</span><span class="n">confMon</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Create the tibble</span><span class="w">
  </span><span class="n">group_by</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">civilwarstatus</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Set the group by</span><span class="w">
  </span><span class="n">filter</span><span class="p">(</span><span class="n">type</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'Monument'</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Determine how you want to summarise</span><span class="w">
  </span><span class="n">arrange</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="n">desc</span><span class="p">(</span><span class="n">count</span><span class="p">))</span><span class="w"> </span><span class="c1"># Organize the data</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## # A tibble: 24 x 3
## # Groups:   state [24]
##             state    civilwarstatus count
##             &lt;chr&gt;             &lt;chr&gt; &lt;int&gt;
##  1 North Carolina Confederate State    50
##  2        Georgia Confederate State    49
##  3       Virginia Confederate State    45
##  4       Kentucky      Border State    35
##  5 South Carolina Confederate State    34
##  6        Alabama Confederate State    31
##  7          Texas Confederate State    26
##  8      Louisiana Confederate State    23
##  9    Mississippi Confederate State    22
## 10       Arkansas Confederate State    21
## # ... with 14 more rows
</code></pre></div></div>

<h2 id="first-visualization">First Visualization</h2>

<p>An additional benifit of using the tidyverse is that you can pipe in the ggplot2 commands. The tidyverse package allows you to do both data transformation and visualization within one string of commands. In the code below I have added the ggplot2 commands needed to create a bar chart. I want to point out that by using the tidyverse, I have been able to keep my code relatively clean and haven’t needed to create any new dataframes.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">as.tibble</span><span class="p">(</span><span class="n">confMon</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">group_by</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">civilwarstatus</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">arrange</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="n">desc</span><span class="p">(</span><span class="n">count</span><span class="p">))</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">reorder</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">count</span><span class="p">),</span><span class="n">y</span><span class="o">=</span><span class="n">count</span><span class="p">,</span><span class="n">fill</span><span class="o">=</span><span class="n">civilwarstatus</span><span class="p">),</span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'identity'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">coord_flip</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Number of civil war monuments by state"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/unnamed-chunk-2-1.png" alt="Where are confederate monuments" /></p>

<p>While the visual above gets the job done, it is always important to clean up your visuals for publication. Using ggplot2 allows the analyst to make all of the needed adjustments to background, the legend, and other various elements to brand your visuals.</p>

<p>Looking at the data we can see that there are some obvious patterns. First, the states with the most memorials are states that belonged to the confederacy. However, some boarder states have a number of memorials. As we will see in the map below, the majority of the memorials are in the south east of the country. However, there is are a surprising number in the North West.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">as.tibble</span><span class="p">(</span><span class="n">confMon</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">group_by</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">civilwarstatus</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">arrange</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="n">desc</span><span class="p">(</span><span class="n">count</span><span class="p">))</span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ggplot</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">reorder</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">count</span><span class="p">),</span><span class="n">y</span><span class="o">=</span><span class="n">count</span><span class="p">,</span><span class="n">fill</span><span class="o">=</span><span class="n">civilwarstatus</span><span class="p">),</span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'identity'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">coord_flip</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Number of civil war monuments by state"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="c1">#set theme to black and white</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.background</span><span class="o">=</span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#F0F0F0"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.background</span><span class="o">=</span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#F0F0F0"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.border</span><span class="o">=</span><span class="n">element_rect</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#F0F0F0"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="c1"># Format the grid</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.grid.major</span><span class="o">=</span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#D0D0D0"</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="m">.75</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.ticks</span><span class="o">=</span><span class="n">element_blank</span><span class="p">())</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="c1"># Dispose of the legend</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.title</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">face</span><span class="o">=</span><span class="s2">"bold"</span><span class="p">,</span><span class="n">hjust</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="n">vjust</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#3C3C3C"</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="m">14</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Number of memorials"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"State"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.text.x</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">11</span><span class="p">,</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#535353"</span><span class="p">,</span><span class="n">face</span><span class="o">=</span><span class="s2">"bold"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.text.y</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">11</span><span class="p">,</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#535353"</span><span class="p">,</span><span class="n">face</span><span class="o">=</span><span class="s2">"bold"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.title.y</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">11</span><span class="p">,</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#535353"</span><span class="p">,</span><span class="n">face</span><span class="o">=</span><span class="s2">"bold"</span><span class="p">,</span><span class="n">vjust</span><span class="o">=</span><span class="m">1.5</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.title.x</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">11</span><span class="p">,</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#535353"</span><span class="p">,</span><span class="n">face</span><span class="o">=</span><span class="s2">"bold"</span><span class="p">,</span><span class="n">vjust</span><span class="o">=</span><span class="m">-.5</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="c1"># Plot margins and finally line annotations</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.margin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">.5</span><span class="p">,</span><span class="w"> </span><span class="m">.7</span><span class="p">),</span><span class="w"> </span><span class="s2">"cm"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">legend.position</span><span class="o">=</span><span class="s2">"bottom"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/unnamed-chunk-3-1.png" alt="Where are confederate monuments - formatted" /></p>

<h1 id="mapping-with-the-tidyverse">Mapping with the tidyverse</h1>

<p>The visual above demonstrates that confederate memorials are consolidated into only portion of the states, it is nice to be able to visual see how these states might be related. The tidyverse also gives the R user the ability to build maps quickly and easily. To get started we do need to bring in the ‘maps’ package.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span><span class="p">(</span><span class="n">maps</span><span class="p">)</span><span class="w">

</span><span class="n">states</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">map_data</span><span class="p">(</span><span class="s1">'state'</span><span class="p">)</span><span class="w">

</span><span class="n">states_all</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">region</span><span class="o">=</span><span class="n">unique</span><span class="p">(</span><span class="n">states</span><span class="o">$</span><span class="n">region</span><span class="p">))</span><span class="w">
</span><span class="n">stateMon</span><span class="o">&lt;-</span><span class="n">confMon</span><span class="o">%&gt;%</span><span class="n">group_by</span><span class="p">(</span><span class="n">state</span><span class="p">)</span><span class="o">%&gt;%</span><span class="n">summarise</span><span class="p">(</span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">mutate</span><span class="p">(</span><span class="n">region</span><span class="o">=</span><span class="n">tolower</span><span class="p">(</span><span class="n">state</span><span class="p">))</span><span class="w">
</span><span class="n">stateMon</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">left_join</span><span class="p">(</span><span class="n">states_all</span><span class="p">,</span><span class="n">stateMon</span><span class="p">,</span><span class="n">by</span><span class="o">=</span><span class="s1">'region'</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.background</span><span class="o">=</span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#F0F0F0"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.background</span><span class="o">=</span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#F0F0F0"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.border</span><span class="o">=</span><span class="n">element_rect</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#F0F0F0"</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="c1"># Format the grid</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.title.x</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.text.x</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.ticks.x</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.title.y</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.text.y</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.ticks.y</span><span class="o">=</span><span class="n">element_blank</span><span class="p">())</span><span class="o">+</span><span class="w">
  </span><span class="c1"># Dispose of the legend</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.title</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">face</span><span class="o">=</span><span class="s2">"bold"</span><span class="p">,</span><span class="n">hjust</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="n">vjust</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">colour</span><span class="o">=</span><span class="s2">"#3C3C3C"</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="m">14</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_map</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">states</span><span class="p">,</span><span class="w"> </span><span class="n">map</span><span class="o">=</span><span class="n">states</span><span class="p">,</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">map_id</span><span class="o">=</span><span class="n">region</span><span class="p">),</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#ffffff"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="s2">"#ffffff"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.15</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_map</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">stateMon</span><span class="p">,</span><span class="n">map</span><span class="o">=</span><span class="n">states</span><span class="p">,</span><span class="n">aes</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="n">count</span><span class="p">,</span><span class="n">map_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">region</span><span class="p">),</span><span class="n">color</span><span class="o">=</span><span class="s2">"#ffffff"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.15</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_continuous</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="s1">'lightblue'</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="o">=</span><span class="s1">'darkblue'</span><span class="p">,</span><span class="w"> </span><span class="n">guide</span><span class="o">=</span><span class="s1">'colorbar'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Number of Confederate Memorials per State"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://danlarson.io/static/img/unnamed-chunk-4-1.png" alt="State Map showing where confederate monuments are" /></p>

<h2 id="wrapping-up">Wrapping up</h2>

<p>Using the tibbles, tidyr, dplr, and ggplot2 allow for very quick and easy manipulation of data. With fewer then ten lines of code you are up have visualizations without filling up your environment with unneeded objects. I am still new to using the tidyverse packages and using this space to learn more about how to use them efficiently. I will continue to explore this data set, adding new elements as I think of them, to try to understand how it is impacting our current culture.</p>
 ]]></content>
</entry>



</feed>
