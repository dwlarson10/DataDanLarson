'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = nodesIteration;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function nodesIteration(Graph) {

  return {
    '#.nodes': {
      'it should return the list of nodes of the graph.': function itShouldReturnTheListOfNodesOfTheGraph() {
        var graph = new Graph();
        graph.addNodesFrom(['one', 'two', 'three']);

        _assert2.default.deepEqual(graph.nodes(), ['one', 'two', 'three']);
      }
    },

    '#.nodesIterator': {
      'it should be possible to create a nodes iterator.': function itShouldBePossibleToCreateANodesIterator() {
        var graph = new Graph();
        graph.addNodesFrom(['one', 'two', 'three']);

        var iterator = graph.nodesIterator();

        _assert2.default.strictEqual(iterator.next().value, 'one');
        _assert2.default.strictEqual(iterator.next().value, 'two');
        _assert2.default.strictEqual(iterator.next().value, 'three');
        _assert2.default.strictEqual(iterator.next().done, true);
      }
    }
  };
} /**
   * Graphology Nodes Iteration Specs
   * =================================
   *
   * Testing the nodes iteration-related methods of the graph.
   */